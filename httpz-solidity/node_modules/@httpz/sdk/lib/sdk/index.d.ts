import { HTTPZInstanceConfig } from './config';
import { PublicParams, ZKInput } from './encrypt';
import { EIP712 } from './keypair';
import { CtHandleContractPair } from './userDecrypt';
export type HTTPZInstance = {
    createEncryptedInput: (contractAddress: string, userAddress: string) => ZKInput;
    generateKeypair: () => {
        publicKey: string;
        privateKey: string;
    };
    createEIP712: (publicKey: string, contractAddresses: string[], startTimestamp: string | number, durationDays: string | number) => EIP712;
    publicDecrypt: (handle: bigint) => Promise<bigint>;
    userDecrypt: (handle: CtHandleContractPair[], privateKey: string, publicKey: string, signature: string, contractAddresses: string[], userAddress: string, startTimestamp: string | number, durationDays: string | number) => Promise<bigint[]>;
    getPublicKey: () => {
        publicKeyId: string;
        publicKey: Uint8Array;
    } | null;
    getPublicParams: (bits: keyof PublicParams) => {
        publicParams: Uint8Array;
        publicParamsId: string;
    } | null;
};
export { generateKeypair, createEIP712 } from './keypair';
export declare const createInstance: (config: HTTPZInstanceConfig) => Promise<HTTPZInstance>;
